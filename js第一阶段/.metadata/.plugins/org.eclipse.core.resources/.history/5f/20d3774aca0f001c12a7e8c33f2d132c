<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>拖放小方块</title>
	<style type="text/css">
	   ul, li{
	       list-style: none;
	   }
	   ul li{
	       width: 100px;
	       height: 50px;
	       background: lightblue;
	       margin: 10px;
	   }
	   .box{
	       width: 300px;
           height: 300px;
           border: 2px dotted red;
           margin-left: 60px;
	   }
	</style>
</head>
<body>
    <ul>
        <!-- draggable='true'   设置dom节点可以拖动 -->
        <li draggable="true">1</li>
        <li draggable="true">2</li>
        <li draggable="true">3</li>
    </ul>
    <div class="box"></div>
    <script type="text/javascript">
	    window.onload = function () {
	        //获取dom节点
	        var ul = document.querySelector('ul');
	        var li = oUl.querySelectorAll('li');
	        var box = document.querySelector('.box');
	
	        //拖拽元素
	        for (var i = 0; i < aLi.length; i++) {
	            //1.开始拖拽
	            li[i].ondragstart = function (ev) {
	                this.style.background = 'pink';
	                //拖拽时传递参数
	                ev.dataTransfer.setData('text', this.innerHTML);
	            }
	            
	          //拖拽中
	            li[i].ondrag = function () {                
	                this.remove();
	            }
	        }
	
	        //进入拖拽的目的地
	        box.ondragenter = function () {
	            this.style.background = "orange";
	        }
	        
	        //想要drop事件触发，必须在dragover阻止默认事件
	        box.ondragover = function (ev) {
	            ev.preventDefault();
	        }
	        
	        //默认 即使在目的地的上面释放鼠标，也不会触发 drop；
	        box.ondrop = function (ev) {
	            var oLi = document.createElement('li');
	            //ev.dataTransfer.getData 获取拖拽的参数
	            oLi.innerHTML = ev.dataTransfer.getData('text');
	            box.appendChild(oLi);
	        }
	        //从目的地离开
	        oBox.ondragleave = function () {
	            this.style.background = 'lightblue';
	        }
	    }
    </script>
</body>
</html>